p $rax
p $line
p $line_no
p $__LINE__
p/wx $rip
x/wx $rip
x/i $rip
x/hx $rip
gdb.
print(dir(gdb))
help rbreak 
python print(a)
python print(dir(selected_frame))
python print(dir(gdb.selected_frame))
python print(dir(gdb.selected_frame()))
python print(dir(gdb.selected_frame().pc))
python print(dir(gdb.selected_frame().pc()))
python print(gdb.selected_inferior())
python print(dir(gdb.selected_inferior()))
python print(gdb.selected_inferior().read_memory)
python print(gdb.selected_inferior().read_memory())
python print(gdb.selected_inferior().read_memory(gdb.selected_frame().pc()))
python print(gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2))
python print(gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2)).to_bytes()
python print(gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2).to_bytes())
x/2x $rip
x/2bx $rip
python
next_instr = gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2).tobytes()
if next_instr[0] in [0xcc, 0xcd, 0xce, 0xf1]:
    print("upcoming int:", next_instr)
python print(gdb.selected_frame().pc())
python print(f'{gdb.selected_frame().pc():x}')
python print(f'{gdb.selected_frame().pc():#x}')
python print(f'{gdb.selected_frame().pc() + 2:#x}')
python
class StepOverInterrupt(gdb.Command):
    def invoke(self, arg, from_tty):
        next_instr_byte = gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2)[0]
        if next_instr_byte in [0xcc, 0xcd, 0xce, 0xf1]:
            if next_instr_byte == 0xcd:
                print( f"tbreak *{gdb.selected().pc() + 2:#x}")
            else:
                print( f"tbreak *{gdb.selected().pc() + 1:#x}")
            print("continue")
        else:
            print("si");

StepOverInterrupt('isi', gdb.COMMAND_USER)
end
python
class StepOverInterrupt(gdb.Command):
    def invoke(self, arg, from_tty):
        next_instr_byte = gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2)[0]
        if next_instr_byte in [0xcc, 0xcd, 0xce, 0xf1]:
            if next_instr_byte == 0xcd:
                print( f"tbreak *{gdb.selected().pc() + 2:#x}")
            else:
                print( f"tbreak *{gdb.selected().pc() + 1:#x}")
            print("continue")
        else:
            print("si");

StepOverInterrupt('isi', gdb.COMMAND_USER)
gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2)[0]
python gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2)[0]
python gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2)
python gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2).tobytes()
python print(gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2).tobytes())
python print(gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2)[0])
python print(gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2)[0] == 0xcd)
python print(gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2).tobytes()[0] == 0xcd)
python
class StepOverInterrupt(gdb.Command):
    def invoke(self, arg, from_tty):
        next_instr_byte = gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2).tobytes()[0]
        if next_instr_byte in [0xcc, 0xcd, 0xce, 0xf1]:
            if next_instr_byte == 0xcd:
                print( f"tbreak *{gdb.selected().pc() + 2:#x}")
            else:
                print( f"tbreak *{gdb.selected().pc() + 1:#x}")
            print("continue")
        else:
            print("si");

StepOverInterrupt('isi', gdb.COMMAND_USER)
python
class StepOverInterrupt(gdb.Command):
    def invoke(self, arg, from_tty):
        next_instr_byte = gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2).tobytes()[0]
        if next_instr_byte in [0xcc, 0xcd, 0xce, 0xf1]:
            if next_instr_byte == 0xcd:
                print( f"tbreak *{gdb.selected_inferior().pc() + 2:#x}")
            else:
                print( f"tbreak *{gdb.selected_inferior().pc() + 1:#x}")
            print("continue")
        else:
            print("si");

StepOverInterrupt('isi', gdb.COMMAND_USER)
si
isi
info stack
q
python
class StepOverInterrupt(gdb.Command):
    def invoke(self, arg, from_tty):
        next_instr_byte = gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2).tobytes()[0]
        if next_instr_byte in [0xcc, 0xcd, 0xce, 0xf1]:
            if next_instr_byte == 0xcd:
                print( f"tbreak *{gdb.selected_frame().pc() + 2:#x}")
            else:
                print( f"tbreak *{gdb.selected_frame().pc() + 1:#x}")
            print("continue")
        else:
            print("si")

StepOverInterrupt('isi', gdb.COMMAND_USER)
tbreak *0x7c23
continue
ni
tb *0x7c5a
python gdb.execute("")
python gdb.execute("p $rip")
python
class StepOverInterrupt(gdb.Command):
    def invoke(self, arg, from_tty):
        next_instr_byte = gdb.selected_inferior().read_memory(gdb.selected_frame().pc(), 2).tobytes()[0]
        if next_instr_byte in [0xcc, 0xcd, 0xce, 0xf1]:
            if next_instr_byte == 0xcd:
                gdb.execute( f"tbreak *{gdb.selected_frame().pc() + 2:#x}")
            else:
                gdb.execute( f"tbreak *{gdb.selected_frame().pc() + 1:#x}")
            gdb.execute( "continue")
        else:
            gdb.execute( "si")

StepOverInterrupt('isi', gdb.COMMAND_USER)
is
stack_layout 
info frame
b _start
x/10hx $rsp
fin
x/s dump_16_msak
x/s dump_16_mask
x/s dump_mask16 
p dump_mask16 
p/s dump_mask16 
p $rsi
x $rsi
tb 165
isi
tb 14
c
p state
p current_
p current_char 
p v
p temp_buffer 
p/s temp_buffer 
p/c temp_buffer 
s
n
si
q
tb 82
isi
tb 14
c
si
s
p x
n
tb 14
c
si
n
q
q
c
q
set $edx=0x02460000
set $ecx=0x7d130039
set $ebx=0x20000
x/10hx $esp
si
isi
x/1dx 0xd000
x/1wx 0xd000
x/1gx 0xd000
x/8gx 0xd000
q
set $ebx=0x20000
set $edx=0x02460000
set $ecx=0x7d130039
x/10hx $esp
isi
x/4gx 0xc000
x/4gx 0xc400
x/4gx 0xc800
x/4gx 0xe000
x/4gx 0xd000
si
tb 14
c
s
n
b main
c
s
x/s $rdi
si
n
q
b main
c
s
n
si
b 40
c
isi
b _start
n
tb *0x879f
c
ni
si
c
p/8gx $rsp
x/8gx $rsp+0x40
x/8gx $rsp+0x60
p/x frame
p/x $rsp
p frame
x frame
p/x *frame
n
ni
si
q
help catch 
help catch syscalls
help catch syscall
file =echo
catch syscall
r
help catch syscall
c
include
info info
info history
help history
help his
help hist
isi
q
isi
info stack
si
info stack
isi
info stack
fin
ret
q
isi
c
si
b interrupt_handlers.c:kbd_interrupt_handler 
c
si
x/s $rsi
x/s $rdi
si
x/s $rdi
x/s $rsi
x/i $rip
si
x/i $rip
n
si
stack_layout
isi
